[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.__project_slug }}"
version = "0.1.0"
description = "MCP server with decorators, unified logging, and multiple transports"
readme = "README.md"
authors = [
    {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.email }}"}
]
license = {text = "MIT"}
requires-python = ">=3.11,<3.13"
dependencies = [
    "mcp>=1.0.0",
    "mcp[cli]>=1.0.0",
    "anyio>=4.5",
    "starlette>=0.36.0",
    "uvicorn>=0.27.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "platformdirs>=4.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
monitoring = ["psutil>=5.9.0"]
ui = ["streamlit>=1.29.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
]

[project.scripts]
# Single entry point for server that handles both transports
{{ cookiecutter.__project_slug }}-server = "{{ cookiecutter.__project_slug }}.server.app:main"
{{ cookiecutter.__project_slug }}-server-stdio = "{{ cookiecutter.__project_slug }}.server.app:main_stdio"
{{ cookiecutter.__project_slug }}-server-http = "{{ cookiecutter.__project_slug }}.server.app:main_http"
{{ cookiecutter.__project_slug }}-server-sse = "{{ cookiecutter.__project_slug }}.server.app:main_sse"
{{ cookiecutter.__project_slug }}-client = "{{ cookiecutter.__project_slug }}.client.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["{{ cookiecutter.__project_slug }}*"]
namespaces = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov={{ cookiecutter.__project_slug }} --cov-report=html --cov-report=term-missing" 